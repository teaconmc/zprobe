plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '0.1.4'
group = 'org.teacon'
archivesBaseName = 'ZProbe-Forge-1.19.4'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.4'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'zprobe'
            mods {
                zprobe {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'zprobe'
            mods {
                zprobe {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'zprobe'
            mods {
                zprobe {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'zprobe', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                zprobe {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.4-45.0.63'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "ZProbe-Forge-1.19.4",
                "Specification-Vendor"    : "TeaConMC",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TeaConMC",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.register('devJar', Jar) {
    archiveClassifier = "dev"
    dependsOn classes
    from {
        sourceSets.main.output
    }
}

tasks.register('srcJar', Jar) {
    archiveClassifier = "src"
    from {
        sourceSets.main.allSource
    }
}

jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

artifacts {
    archives devJar
    archives srcJar
}

publishing {
    publications {
        release(MavenPublication) {
            artifactId = archivesBaseName

            artifact jar
            artifact srcJar
            artifact devJar

            pom {
                name = 'ZProbe Forge 1.19.4'
                description = 'Probe and signal handler for servers running inside K8s clusters'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/license/mit/'
                    }
                }
                developers {
                    developer {
                        id = 'Seraph_JACK'
                        name = 'Seraph_JACK'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "TeaConOSS"
            url = "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.TEACON_ARCHIVE_ACCESS_KEY
                secretKey = System.env.TEACON_ARCHIVE_ACCESS_SECRET
            }
        }
        maven {
            name = "TeaConGitea"
            url = "https://git.teacon.cn/api/packages/teaconmc/maven"

            credentials(HttpHeaderCredentials) {
                name = "Authorization"
                value = "token " + System.getenv("GITEA_TOKEN")
            }

            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
